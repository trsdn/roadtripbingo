{"version":3,"file":"js/bundle.js","mappings":"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","sources":["webpack://roadtripbingo/./src/js/modules/storage.js","webpack://roadtripbingo/./src/js/modules/i18n.js","webpack://roadtripbingo/./src/js/app.js","webpack://roadtripbingo/./src/js/modules/imageUtils.js","webpack://roadtripbingo/./src/js/modules/cardGenerator.js","webpack://roadtripbingo/./src/js/modules/pdfGenerator.js"],"sourcesContent":["// Road Trip Bingo - Storage System\n// Using JSON import/export for data persistence\n\nclass Storage {\n    constructor() {\n        this.data = {\n            icons: [],\n            settings: {\n                language: 'en',\n                theme: 'light',\n                gridSize: 5,\n                cardsPerSet: 1\n            },\n            gameStates: []\n        };\n    }\n\n    // Initialize storage\n    init() {\n        return new Promise((resolve, reject) => {\n            try {\n                // Try to load existing data from localStorage\n                const savedData = localStorage.getItem('roadtripbingo-data');\n                if (savedData) {\n                    this.data = { ...this.data, ...JSON.parse(savedData) };\n                }\n                console.log('Storage initialized successfully');\n                resolve(this.data);\n            } catch (error) {\n                console.error('Error initializing storage:', error);\n                reject(error);\n            }\n        });\n    }\n\n    // Save all data\n    save() {\n        return new Promise((resolve, reject) => {\n            try {\n                // Check if the data is too large for localStorage\n                const dataString = JSON.stringify(this.data);\n                // Get estimated size in MB\n                const estimatedSizeMB = (dataString.length * 2) / (1024 * 1024);\n                \n                // Log size for debugging\n                console.log(`Data size: ~${estimatedSizeMB.toFixed(2)} MB`);\n                \n                // Check if approaching localStorage limits (typically 5-10MB)\n                if (estimatedSizeMB > 4.5) {\n                    console.warn('Warning: Data size approaching localStorage limits');\n                }\n                \n                localStorage.setItem('roadtripbingo-data', dataString);\n                console.log('Data saved successfully');\n                resolve(true);\n            } catch (error) {\n                console.error('Error saving data:', error);\n                \n                // Check if it's a storage quota error\n                if (error.name === 'QuotaExceededError' || \n                    error.toString().includes('quota') || \n                    error.toString().includes('storage')) {\n                    console.error('Storage quota exceeded. Data not saved.');\n                    // Create a custom error with more information\n                    const storageError = new Error('Storage quota exceeded');\n                    storageError.name = 'QuotaExceededError';\n                    reject(storageError);\n                } else {\n                    reject(error);\n                }\n            }\n        });\n    }\n\n    // Icon operations\n    saveIcons(icons) {\n        this.data.icons = icons;\n        return this.save().then(() => {\n            console.log(`Saved ${icons.length} icons to storage`);\n            return icons;\n        });\n    }\n\n    loadIcons() {\n        return Promise.resolve(this.data.icons || []);\n    }\n\n    deleteIcon(id) {\n        this.data.icons = (this.data.icons || []).filter(icon => icon.id !== id);\n        return this.save();\n    }\n\n    clearIcons() {\n        this.data.icons = [];\n        return this.save();\n    }\n\n    // Settings operations\n    saveSettings(settings) {\n        this.data.settings = { ...this.data.settings, ...settings };\n        return this.save();\n    }\n\n    loadSettings() {\n        return Promise.resolve(this.data.settings || {});\n    }\n\n    // Game state operations\n    saveGameState(gameState) {\n        this.data.gameStates.push(gameState);\n        return this.save();\n    }\n\n    loadGameStates() {\n        return Promise.resolve(this.data.gameStates || []);\n    }\n\n    // Export data for backup\n    exportData() {\n        const dataStr = JSON.stringify(this.data, null, 2);\n        const blob = new Blob([dataStr], { type: 'application/json' });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = 'roadtripbingo-backup.json';\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        URL.revokeObjectURL(url);\n    }\n\n    // Import data from backup\n    importData(file) {\n        return new Promise((resolve, reject) => {\n            const reader = new FileReader();\n            reader.onload = (event) => {\n                try {\n                    const data = JSON.parse(event.target.result);\n                    this.data = data;\n                    this.save()\n                        .then(() => resolve(true))\n                        .catch(reject);\n                } catch (error) {\n                    reject(error);\n                }\n            };\n            reader.onerror = reject;\n            reader.readAsText(file);\n        });\n    }\n}\n\n// Create the storage instance\nconst storage = new Storage();\n\n// Export the storage instance as the default export\nexport default storage; ","// Road Trip Bingo - Internationalization\n// Provides language translations and utilities\n\n// Define all supported languages and their translations\nconst languages = {\n    en: {\n        title: \"Road Trip Bingo Generator\",\n        bingoCardTitle: \"Bingo Card Title:\",\n        gridSize: \"Grid Size:\",\n        numberOfSets: \"Number of Sets:\",\n        cardsPerSet: \"Cards per Set:\",\n        generateBtn: \"Generate Bingo Cards\",\n        iconManager: \"Icon Manager\",\n        uploadIcons: \"Upload Icons\",\n        clearIcons: \"Clear All Icons\",\n        currentlyUsing: \"Currently using\",\n        icons: \"icons\",\n        preview: \"Preview\",\n        downloadPDF: \"Download PDF\",\n        needIcons: \"Need at least {count} icons for a single set\",\n        manyUniqueSets: \"Many unique sets possible with {count} icons\",\n        iconsAvailable: \"{available} icons available ({needed} needed per set)\",\n        backupData: \"Backup Data\",\n        restoreData: \"Restore Data\",\n        backupSuccess: \"Data backup created successfully\",\n        restoreSuccess: \"Data restored successfully\",\n        restoreError: \"Failed to restore data. Please make sure you selected a valid backup file.\",\n        pdfCompression: \"PDF Compression:\"\n    },\n    de: {\n        title: \"Auto Bingo Generator\",\n        bingoCardTitle: \"Bingo Kartentitel:\",\n        gridSize: \"Rastergröße:\",\n        numberOfSets: \"Anzahl der Sets:\",\n        cardsPerSet: \"Karten pro Set:\",\n        generateBtn: \"Bingo Karten generieren\",\n        iconManager: \"Icon Manager\",\n        uploadIcons: \"Icons hochladen\",\n        clearIcons: \"Alle Icons löschen\",\n        currentlyUsing: \"Derzeit verwendet\",\n        icons: \"Icons\",\n        preview: \"Vorschau\",\n        downloadPDF: \"PDF herunterladen\",\n        needIcons: \"Mindestens {count} Icons für ein einzelnes Set erforderlich\",\n        manyUniqueSets: \"Viele einzigartige Sets möglich mit {count} Icons\",\n        iconsAvailable: \"{available} Icons verfügbar ({needed} pro Set erforderlich)\",\n        backupData: \"Daten sichern\",\n        restoreData: \"Daten wiederherstellen\",\n        backupSuccess: \"Datensicherung erfolgreich erstellt\",\n        restoreSuccess: \"Daten erfolgreich wiederhergestellt\",\n        restoreError: \"Fehler beim Wiederherstellen der Daten. Bitte stellen Sie sicher, dass Sie eine gültige Sicherungsdatei ausgewählt haben.\",\n        pdfCompression: \"PDF-Komprimierung:\"\n    }\n};\n\n/**\n * Apply translations to all elements with data-translate attributes\n * @param {string} lang - Language code (e.g., 'en', 'de')\n */\nfunction setLanguage(lang) {\n    const elements = document.querySelectorAll('[data-translate]');\n    elements.forEach(el => {\n        const key = el.getAttribute('data-translate');\n        el.textContent = languages[lang][key];\n    });\n}\n\n/**\n * Get translated text with optional replacements\n * @param {string} key - The translation key\n * @param {Object} replacements - Key-value pairs for replacements\n * @param {string} language - The language code (defaults to 'en')\n * @returns {string} - The translated text with replacements\n */\nfunction getTranslatedText(key, replacements = {}, language = 'en') {\n    if (!languages[language]) {\n        console.warn(`Language '${language}' not found, falling back to English`);\n        language = 'en';\n    }\n    \n    let text = languages[language]?.[key] || key;\n    \n    // Replace placeholders with actual values\n    for (const [placeholder, value] of Object.entries(replacements)) {\n        text = text.replace(`{${placeholder}}`, value);\n    }\n    \n    return text;\n}\n\n/**\n * Initialize the language selector and set default language\n * @param {function} onChange - Callback when language changes\n */\nfunction initLanguageSelector(onChange) {\n    document.addEventListener('DOMContentLoaded', () => {\n        const languageSelect = document.getElementById('languageSelect');\n        if (!languageSelect) {\n            console.error('Language selector element not found');\n            return;\n        }\n        \n        // Set initial language\n        const initialLang = 'en';\n        setLanguage(initialLang);\n        \n        // Set the dropdown to match the initial language\n        languageSelect.value = initialLang;\n        \n        // Add change event listener\n        languageSelect.addEventListener('change', () => {\n            const selectedLang = languageSelect.value;\n            setLanguage(selectedLang);\n            \n            // Call onChange callback if provided\n            if (typeof onChange === 'function') {\n                onChange(selectedLang);\n            }\n        });\n    });\n}\n\n// Export functions and data\nexport { \n    languages,\n    setLanguage,\n    getTranslatedText,\n    initLanguageSelector\n}; ","// Road Trip Bingo - Main Application\n// Main entry point that coordinates all modules and UI interactions\n\n// Import modules\nimport storage from './modules/storage.js';\nimport { setLanguage, getTranslatedText, initLanguageSelector } from './modules/i18n.js';\nimport { convertBlobToBase64Icon } from './modules/imageUtils.js';\nimport { generateBingoCards } from './modules/cardGenerator.js';\nimport { generatePDF, downloadPDFBlob } from './modules/pdfGenerator.js';\n\n// DOM elements\nlet titleInput;\nlet gridSizeSelect;\nlet setCountInput;\nlet setCountInfo;\nlet cardCountInput;\nlet generateBtn;\nlet downloadBtn;\nlet cardPreview;\nlet identifierElement;\nlet iconUploadInput;\nlet clearIconsBtn;\nlet backupBtn;\nlet restoreBtn;\nlet restoreInput;\nlet pdfCompression;\nlet iconCount;\n\n// Application state\nlet availableIcons = [];\nlet generatedCards = null;\n\n// Initialize the application\ndocument.addEventListener('DOMContentLoaded', async () => {\n    console.log('Initializing Road Trip Bingo Generator...');\n\n    // Initialize modules\n    window.iconDB = storage; // For backward compatibility\n    await storage.init();\n    \n    // Initialize DOM elements\n    initializeDOMElements();\n    \n    // Initialize language selector\n    initLanguageSelector((language) => {\n        // Save language preference\n        storage.saveSettings({ language });\n        updateUI();\n    });\n    \n    // Load saved icons\n    loadIcons();\n    \n    // Add event listeners\n    setupEventListeners();\n    \n    console.log('Application initialized successfully');\n});\n\n// Initialize DOM elements\nfunction initializeDOMElements() {\n    titleInput = document.getElementById('title');\n    gridSizeSelect = document.getElementById('gridSize');\n    setCountInput = document.getElementById('setCount');\n    setCountInfo = document.getElementById('setCountInfo');\n    cardCountInput = document.getElementById('cardCount');\n    generateBtn = document.getElementById('generateBtn');\n    downloadBtn = document.getElementById('downloadBtn');\n    cardPreview = document.getElementById('cardPreview');\n    identifierElement = document.getElementById('identifier');\n    iconUploadInput = document.getElementById('iconUpload');\n    clearIconsBtn = document.getElementById('clearIconsBtn');\n    iconCount = document.getElementById('iconCount');\n    backupBtn = document.getElementById('backupBtn');\n    restoreBtn = document.getElementById('restoreBtn');\n    restoreInput = document.getElementById('restoreInput');\n    pdfCompression = document.getElementById('pdfCompression');\n}\n\n// Setup all event listeners\nfunction setupEventListeners() {\n    // Grid size change\n    gridSizeSelect.addEventListener('change', updateRequiredIconCount);\n    \n    // Set count change\n    setCountInput.addEventListener('change', updateRequiredIconCount);\n    \n    // Cards per set change\n    cardCountInput.addEventListener('change', updateRequiredIconCount);\n    \n    // Generate button\n    generateBtn.addEventListener('click', generateCards);\n    \n    // Download button\n    downloadBtn.addEventListener('click', downloadPDF);\n    \n    // Icon upload\n    iconUploadInput.addEventListener('change', uploadIcons);\n    \n    // Clear icons\n    clearIconsBtn.addEventListener('click', clearIcons);\n    \n    // Backup data\n    backupBtn.addEventListener('click', backupData);\n    \n    // Restore data\n    restoreBtn.addEventListener('click', () => restoreInput.click());\n    restoreInput.addEventListener('change', restoreData);\n    \n    // Update the required icon count initially\n    updateRequiredIconCount();\n}\n\n// Load icons from storage\nasync function loadIcons() {\n    try {\n        availableIcons = await storage.loadIcons();\n        updateIconCount();\n        console.log(`Loaded ${availableIcons.length} icons from storage`);\n    } catch (error) {\n        console.error('Error loading icons:', error);\n    }\n}\n\n// Save icons to storage\nasync function saveIconsToStorage() {\n    try {\n        await storage.saveIcons(availableIcons);\n        updateIconCount();\n        console.log(`Saved ${availableIcons.length} icons to storage`);\n        return true;\n    } catch (error) {\n        console.error('Error saving icons to storage:', error);\n        \n        // Check if it's a quota exceeded error\n        if (error.name === 'QuotaExceededError' || \n            error.toString().includes('quota') || \n            error.toString().includes('storage')) {\n            alert('Storage limit exceeded. Try removing some icons or using smaller images.');\n        } else {\n            // Even though we got an error, the icons are still in memory\n            // So we don't show an error to the user unless it's a storage quota error\n        }\n        return false;\n    }\n}\n\n// Upload new icons\nasync function uploadIcons() {\n    const files = iconUploadInput.files;\n    if (!files || files.length === 0) {\n        alert('Please select at least one image file');\n        return;\n    }\n    \n    try {\n        const newIcons = [];\n        for (let i = 0; i < files.length; i++) {\n            const file = files[i];\n            \n            // Check if it's an image\n            if (!file.type.startsWith('image/')) {\n                console.warn(`Skipping non-image file: ${file.name}`);\n                continue;\n            }\n            \n            const iconData = await convertBlobToBase64Icon(file, file.name);\n            newIcons.push(iconData);\n        }\n        \n        if (newIcons.length > 0) {\n            // Add new icons to existing ones\n            availableIcons = [...availableIcons, ...newIcons];\n            \n            // Save to storage\n            const saveResult = await saveIconsToStorage();\n            \n            // Reset the file input\n            iconUploadInput.value = '';\n            \n            // Update UI\n            updateRequiredIconCount();\n        }\n    } catch (error) {\n        console.error('Error uploading icons:', error);\n        alert('Error uploading one or more icons. Please try again.');\n    }\n}\n\n// Clear all icons\nasync function clearIcons() {\n    if (confirm('Are you sure you want to remove all icons?')) {\n        availableIcons = [];\n        await saveIconsToStorage();\n        updateRequiredIconCount();\n    }\n}\n\n// Update icon count display\nfunction updateIconCount() {\n    if (iconCount) {\n        iconCount.textContent = availableIcons.length;\n    }\n}\n\n// Update the required icon count based on selected options\nfunction updateRequiredIconCount() {\n    const gridSize = parseInt(gridSizeSelect.value);\n    const setCount = parseInt(setCountInput.value);\n    const cardsPerSet = parseInt(cardCountInput.value);\n    \n    // Calculate required icons for a single set\n    const cellsPerCard = gridSize * gridSize;\n    const totalCellsPerSet = cellsPerCard * cardsPerSet;\n    \n    // No FREE space - all cells need icons\n    const iconsNeededPerSet = totalCellsPerSet;\n    \n    // Update info text\n    let infoText = '';\n    \n    if (availableIcons.length < iconsNeededPerSet) {\n        // Not enough icons\n        infoText = getTranslatedText('needIcons', { count: iconsNeededPerSet });\n        generateBtn.disabled = true;\n    } else {\n        // Enough icons\n        if (setCount > 1) {\n            infoText = getTranslatedText('manyUniqueSets', { count: availableIcons.length });\n        }\n        generateBtn.disabled = false;\n    }\n    \n    // Update icon availability text\n    const availabilityText = getTranslatedText('iconsAvailable', {\n        available: availableIcons.length,\n        needed: iconsNeededPerSet\n    });\n    \n    // Update UI\n    setCountInfo.textContent = infoText;\n    document.getElementById('iconAvailability').textContent = availabilityText;\n}\n\n// Generate Bingo cards\nfunction generateCards() {\n    const gridSize = parseInt(gridSizeSelect.value);\n    const setCount = parseInt(setCountInput.value);\n    const cardsPerSet = parseInt(cardCountInput.value);\n    const title = titleInput.value.trim();\n    \n    try {\n        // Generate the cards\n        const result = generateBingoCards({\n            icons: availableIcons,\n            gridSize,\n            setCount,\n            cardsPerSet,\n            title\n        });\n        \n        generatedCards = result;\n        \n        // Display the identifier\n        identifierElement.textContent = result.identifier;\n        \n        // Enable download button\n        downloadBtn.disabled = false;\n        \n        // Display preview of the first card\n        displayCardPreview(result.cardSets[0].cards[0]);\n        \n        // Save generation parameters to storage\n        storage.saveSettings({\n            lastGeneration: {\n                gridSize,\n                setCount,\n                cardsPerSet,\n                title,\n                timestamp: new Date().toISOString()\n            }\n        });\n        \n        // Show success message\n        alert(`Successfully generated ${setCount} set(s) with ${cardsPerSet} card(s) each.`);\n    } catch (error) {\n        console.error('Error generating cards:', error);\n        alert(`Error generating cards: ${error.message}`);\n    }\n}\n\n// Display card preview\nfunction displayCardPreview(card) {\n    // Clear preview\n    cardPreview.innerHTML = '';\n    \n    // Create a table to display the grid\n    const table = document.createElement('table');\n    table.className = 'preview-grid';\n    \n    // Add title\n    const titleRow = document.createElement('tr');\n    const titleCell = document.createElement('th');\n    titleCell.colSpan = card.grid.length;\n    titleCell.textContent = card.title;\n    titleRow.appendChild(titleCell);\n    table.appendChild(titleRow);\n    \n    // Add grid cells\n    for (let row = 0; row < card.grid.length; row++) {\n        const tr = document.createElement('tr');\n        for (let col = 0; col < card.grid[row].length; col++) {\n            const cell = card.grid[row][col];\n            const td = document.createElement('td');\n            \n            if (cell.isFreeSpace) {\n                td.textContent = 'FREE';\n                td.className = 'free-space';\n            } else {\n                if (cell.data) {\n                    const img = document.createElement('img');\n                    img.src = cell.data;\n                    img.alt = cell.name;\n                    td.appendChild(img);\n                }\n                \n                const label = document.createElement('div');\n                label.className = 'cell-label';\n                label.textContent = cell.name;\n                td.appendChild(label);\n            }\n            \n            tr.appendChild(td);\n        }\n        table.appendChild(tr);\n    }\n    \n    cardPreview.appendChild(table);\n}\n\n// Download the Bingo cards as PDF\nasync function downloadPDF() {\n    // Show loading indicator\n    downloadBtn.textContent = 'Generating PDF...';\n    downloadBtn.disabled = true;\n    \n    // Use setTimeout to allow the UI to update before starting PDF generation\n    setTimeout(async () => {\n        try {\n            // Get selected compression level\n            const compressionLevel = pdfCompression.value;\n            \n            // Generate the PDF\n            const pdfBlob = await generatePDF({\n                cardSets: generatedCards.cardSets,\n                identifier: generatedCards.identifier,\n                compressionLevel\n            });\n            \n            // Download the PDF\n            downloadPDFBlob(pdfBlob, 'bingo-cards.pdf');\n            \n            // Reset button\n            downloadBtn.textContent = 'Download PDF';\n            downloadBtn.disabled = false;\n        } catch (error) {\n            console.error('Error generating PDF:', error);\n            alert('Error generating PDF. Please try again.');\n            \n            // Reset button\n            downloadBtn.textContent = 'Download PDF';\n            downloadBtn.disabled = false;\n        }\n    }, 100);\n}\n\n// Backup data\nfunction backupData() {\n    try {\n        storage.exportData();\n        alert(getTranslatedText('backupSuccess'));\n    } catch (error) {\n        console.error('Error backing up data:', error);\n        alert(`Error backing up data: ${error.message}`);\n    }\n}\n\n// Restore data\nasync function restoreData() {\n    const file = restoreInput.files[0];\n    if (!file) {\n        return;\n    }\n    \n    try {\n        await storage.importData(file);\n        alert(getTranslatedText('restoreSuccess'));\n        \n        // Reload the page to reflect the restored data\n        setTimeout(() => {\n            window.location.reload();\n        }, 500);\n    } catch (error) {\n        console.error('Error restoring data:', error);\n        alert(getTranslatedText('restoreError'));\n    } finally {\n        // Clear the file input\n        restoreInput.value = '';\n    }\n}\n\n// Update the UI based on current settings\nfunction updateUI() {\n    updateRequiredIconCount();\n}\n\n// Export for testing\n// Convert from CommonJS to ES Module exports\nconst exports = {\n    updateRequiredIconCount,\n    generateCards,\n    displayCardPreview\n};\n\nexport default exports; ","// Road Trip Bingo - Image Utilities\n// Provides functions for handling images\n\n/**\n * Compress an image to reduce its size\n * @param {Blob} blob - The image blob to compress\n * @returns {Promise<Blob>} - Promise that resolves with the compressed image\n */\nfunction compressImage(blob) {\n    return new Promise((resolve, reject) => {\n        const img = new Image();\n        let objectUrl = null;\n        \n        // Create cleanup function to ensure URL object is revoked\n        function cleanupUrl() {\n            if (objectUrl) {\n                URL.revokeObjectURL(objectUrl);\n                objectUrl = null;\n            }\n        }\n        \n        img.onload = function() {\n            try {\n                // Create a canvas to resize the image\n                const canvas = document.createElement('canvas');\n                \n                // Calculate new dimensions while maintaining aspect ratio\n                let width = img.width;\n                let height = img.height;\n                const maxDimension = 800; // Maximum width/height in pixels\n                \n                if (width > height && width > maxDimension) {\n                    height = Math.round(height * (maxDimension / width));\n                    width = maxDimension;\n                } else if (height > maxDimension) {\n                    width = Math.round(width * (maxDimension / height));\n                    height = maxDimension;\n                }\n                \n                // Set canvas dimensions\n                canvas.width = width;\n                canvas.height = height;\n                \n                // Draw the image onto the canvas\n                const ctx = canvas.getContext('2d');\n                ctx.drawImage(img, 0, 0, width, height);\n                \n                // Clean up the URL\n                cleanupUrl();\n                \n                // For PNG with transparency, keep as PNG\n                const isPNG = blob.type === 'image/png';\n                \n                // Convert to blob\n                canvas.toBlob(\n                    compressedBlob => {\n                        if (compressedBlob) {\n                            resolve(compressedBlob);\n                        } else {\n                            reject(new Error('Failed to compress image'));\n                        }\n                    },\n                    isPNG ? 'image/png' : 'image/jpeg',\n                    isPNG ? 0.9 : 0.8 // Quality setting (0.8 = 80% quality)\n                );\n            } catch (error) {\n                cleanupUrl();\n                reject(error);\n            }\n        };\n        \n        img.onerror = function() {\n            cleanupUrl();\n            reject(new Error('Failed to load image for compression'));\n        };\n        \n        // Create an object URL for the blob\n        objectUrl = URL.createObjectURL(blob);\n        img.src = objectUrl;\n    });\n}\n\n/**\n * Convert a Blob/File to a base64 encoded icon object\n * @param {Blob|File} blob - The image blob/file to convert\n * @param {string} name - The name of the icon\n * @returns {Promise<Object>} - Promise that resolves with the icon object\n */\nfunction convertBlobToBase64Icon(blob, name) {\n    return new Promise((resolve, reject) => {\n        // Check if it's an SVG file - SVGs should not be compressed as they're already small\n        const isSVG = blob.type === 'image/svg+xml';\n        \n        // First check if we need to compress the image (if it's too large and not an SVG)\n        if (!isSVG && blob.size > 500 * 1024) { // If larger than 500KB and not SVG\n            compressImage(blob)\n                .then(compressedBlob => {\n                    console.log(`Compressed image from ${(blob.size/1024).toFixed(2)}KB to ${(compressedBlob.size/1024).toFixed(2)}KB`);\n                    processImage(compressedBlob);\n                })\n                .catch(err => {\n                    console.warn('Image compression failed, using original:', err);\n                    processImage(blob);\n                });\n        } else {\n            processImage(blob);\n        }\n        \n        function processImage(imageBlob) {\n            const reader = new FileReader();\n            reader.onload = function(e) {\n                const base64data = e.target.result;\n                const iconName = name.replace(/\\.[^/.]+$/, \"\"); // Remove file extension\n                resolve({\n                    id: Date.now() + '-' + Math.floor(Math.random() * 1000),\n                    name: iconName,\n                    data: base64data\n                });\n            };\n            reader.onerror = function() {\n                reject(new Error('Failed to read image file'));\n            };\n            reader.readAsDataURL(imageBlob);\n        }\n    });\n}\n\n/**\n * Create and return an image element from base64 data\n * @param {string} base64Data - The base64 encoded image data\n * @returns {HTMLImageElement} - The created image element\n */\nfunction createImageFromBase64(base64Data) {\n    const img = new Image();\n    img.src = base64Data;\n    return img;\n}\n\n// Export functions\nexport {\n    compressImage,\n    convertBlobToBase64Icon,\n    createImageFromBase64\n}; ","// Road Trip Bingo - Card Generator\n// Provides functions for generating bingo cards\n\n/**\n * Generate unique sets of bingo cards\n * @param {Object} options - Generation options\n * @param {Array} options.icons - Available icons\n * @param {number} options.gridSize - Size of the grid (e.g., 5 for 5x5)\n * @param {number} options.setCount - Number of sets to generate\n * @param {number} options.cardsPerSet - Number of cards per set\n * @param {string} options.title - Title for the bingo cards\n * @returns {Object} - Generated card sets and identifier\n */\nfunction generateBingoCards(options) {\n    const { icons, gridSize, setCount, cardsPerSet, title } = options;\n    \n    // Validation\n    if (!icons || icons.length === 0) {\n        throw new Error('No icons available');\n    }\n    \n    const cellsPerCard = gridSize * gridSize;\n    const iconsNeededPerSet = cellsPerCard * cardsPerSet;\n    \n    if (icons.length < iconsNeededPerSet) {\n        throw new Error(`Not enough icons. Need at least ${iconsNeededPerSet}`);\n    }\n    \n    // Generate a unique identifier for this set\n    const identifier = generateIdentifier();\n    \n    // Generate the sets\n    const cardSets = [];\n    for (let setIndex = 0; setIndex < setCount; setIndex++) {\n        const set = {\n            id: `set-${setIndex + 1}`,\n            cards: []\n        };\n        \n        // Select icons for this set - randomly shuffle and pick needed amount\n        const selectedIcons = shuffleArray([...icons]).slice(0, iconsNeededPerSet);\n        \n        // Generate cards for this set\n        for (let cardIndex = 0; cardIndex < cardsPerSet; cardIndex++) {\n            // For each card, select a subset of icons and arrange them\n            const startIdx = cardIndex * cellsPerCard;\n            const cardIcons = selectedIcons.slice(startIdx, startIdx + cellsPerCard);\n            \n            // Shuffle the icons for this specific card\n            const shuffledCardIcons = shuffleArray([...cardIcons]);\n            \n            // Create the grid\n            const grid = [];\n            for (let row = 0; row < gridSize; row++) {\n                const gridRow = [];\n                for (let col = 0; col < gridSize; col++) {\n                    const index = row * gridSize + col;\n                    // No FREE spaces - all cells filled with icons\n                    gridRow.push(shuffledCardIcons[index]);\n                }\n                grid.push(gridRow);\n            }\n            \n            set.cards.push({\n                id: `card-${cardIndex + 1}`,\n                title: title || 'Road Trip Bingo',\n                grid: grid\n            });\n        }\n        \n        cardSets.push(set);\n    }\n    \n    return {\n        identifier,\n        cardSets\n    };\n}\n\n/**\n * Generate a unique identifier for a set of cards\n * @returns {string} - The generated identifier\n */\nfunction generateIdentifier() {\n    // Generate a unique set identifier (date + random)\n    const date = new Date();\n    const dateStr = `${date.getFullYear()}${String(date.getMonth() + 1).padStart(2, '0')}${String(date.getDate()).padStart(2, '0')}`;\n    const randomStr = Math.floor(Math.random() * 10000).toString().padStart(4, '0');\n    return `ID:${dateStr}-${randomStr}`;\n}\n\n/**\n * Shuffle an array using Fisher-Yates algorithm\n * @param {Array} array - The array to shuffle\n * @returns {Array} - The shuffled array\n */\nfunction shuffleArray(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n}\n\n// Export functions\nexport {\n    generateBingoCards,\n    generateIdentifier,\n    shuffleArray\n}; ","// Road Trip Bingo - PDF Generator\n// Provides functions for generating PDF files of bingo cards\n\nimport { createImageFromBase64 } from './imageUtils.js';\n\n/**\n * Generate a PDF with bingo cards\n * @param {Object} options - Options for PDF generation\n * @param {Array} options.cardSets - The generated card sets to include in the PDF\n * @param {string} options.identifier - The unique identifier for this set\n * @param {string} options.compressionLevel - PDF compression level ('NONE', 'FAST', 'MEDIUM', 'SLOW')\n * @returns {Promise<Blob>} - Promise that resolves with the generated PDF blob\n */\nasync function generatePDF(options) {\n    const { cardSets, identifier, compressionLevel = 'MEDIUM' } = options;\n    \n    // Get the jsPDF library from window global\n    const { jsPDF } = window.jspdf;\n    \n    // Log compression level\n    console.log(`PDF Generation: Using compression level ${compressionLevel}`);\n    \n    // Create PDF with correct initialization\n    const pdf = new jsPDF({\n        orientation: 'portrait',\n        unit: 'mm',\n        format: 'a4',\n        compress: true // This enables PDF level compression\n    });\n    \n    const pageWidth = pdf.internal.pageSize.getWidth();\n    const pageHeight = pdf.internal.pageSize.getHeight();\n    const margin = 10; // margin in mm\n    \n    // Add metadata and identifier\n    pdf.setProperties({\n        title: 'Road Trip Bingo Cards',\n        subject: 'Bingo Cards for Road Trips',\n        author: 'Road Trip Bingo Generator',\n        keywords: 'bingo, road trip, game',\n        creator: 'Road Trip Bingo Generator'\n    });\n    \n    // Set compression quality based on selected level\n    let imgQuality = 0.8; // Default medium quality\n    \n    switch (compressionLevel) {\n        case 'NONE':\n            imgQuality = 1.0;\n            break;\n        case 'FAST':\n            imgQuality = 0.9;\n            break;\n        case 'MEDIUM':\n            imgQuality = 0.8;\n            break;\n        case 'SLOW':\n            imgQuality = 0.7;\n            break;\n    }\n    \n    let pageCount = 0;\n    \n    // Add set identifier on first page\n    pdf.setFontSize(8);\n    pdf.setTextColor(100, 100, 100);\n    pdf.text(identifier, pageWidth - margin, margin - 5, { align: 'right' });\n    \n    // Process each card set\n    for (let s = 0; s < cardSets.length; s++) {\n        const set = cardSets[s];\n        \n        // Process each card in the set\n        for (let c = 0; c < set.cards.length; c++) {\n            const card = set.cards[c];\n            \n            // Add a new page for each card except the first one\n            if (pageCount > 0) {\n                pdf.addPage();\n                // Add identifier on each page\n                pdf.setFontSize(8);\n                pdf.setTextColor(100, 100, 100);\n                pdf.text(identifier, pageWidth - margin, margin - 5, { align: 'right' });\n            }\n            pageCount++;\n            \n            // Add the card title\n            pdf.setFontSize(16);\n            pdf.setTextColor(0, 0, 0);\n            pdf.text(card.title, pageWidth / 2, margin + 5, { align: 'center' });\n            \n            // Draw the grid\n            const gridSize = card.grid.length;\n            const cellSize = (pageWidth - (2 * margin)) / gridSize;\n            const gridStartY = margin + 15;\n            \n            // Draw the cells\n            for (let row = 0; row < gridSize; row++) {\n                for (let col = 0; col < gridSize; col++) {\n                    const cell = card.grid[row][col];\n                    const x = margin + (col * cellSize);\n                    const y = gridStartY + (row * cellSize);\n                    \n                    // Draw cell border\n                    pdf.setDrawColor(0, 0, 0);\n                    pdf.rect(x, y, cellSize, cellSize, 'S');\n                    \n                    if (cell.isFreeSpace) {\n                        // Draw FREE space\n                        pdf.setFontSize(14);\n                        pdf.text('FREE', x + cellSize / 2, y + cellSize / 2, { align: 'center', baseline: 'middle' });\n                    } else {\n                        // Calculate image position\n                        const imgPadding = 2;\n                        const imgX = x + imgPadding;\n                        const imgY = y + imgPadding;\n                        const imgWidth = cellSize - (2 * imgPadding);\n                        const imgHeight = cellSize - (2 * imgPadding) - 8; // Leave space for text\n                        \n                        try {\n                            // Add the image\n                            if (cell.data) {\n                                // Create temporary image to get dimensions\n                                const img = createImageFromBase64(cell.data);\n                                // Function to draw image when loaded\n                                const drawImage = () => {\n                                    try {\n                                        // Calculate aspect ratio\n                                        const aspect = img.width / img.height;\n                                        let drawWidth = imgWidth;\n                                        let drawHeight = imgWidth / aspect;\n                                        \n                                        // Adjust if too tall\n                                        if (drawHeight > imgHeight) {\n                                            drawHeight = imgHeight;\n                                            drawWidth = imgHeight * aspect;\n                                        }\n                                        \n                                        // Center the image\n                                        const centerX = imgX + (imgWidth - drawWidth) / 2;\n                                        const centerY = imgY + (imgHeight - drawHeight) / 2;\n                                        \n                                        // Add the image to PDF\n                                        pdf.addImage(\n                                            cell.data,\n                                            'JPEG',\n                                            centerX,\n                                            centerY,\n                                            drawWidth,\n                                            drawHeight,\n                                            `img-${cell.id}`,\n                                            'FAST',\n                                            imgQuality\n                                        );\n                                    } catch (imgErr) {\n                                        console.error('Error adding image to PDF:', imgErr);\n                                    }\n                                };\n                                \n                                // Check if image is loaded\n                                if (img.complete) {\n                                    drawImage();\n                                } else {\n                                    // Wait for image to load\n                                    img.onload = drawImage;\n                                }\n                            }\n                            \n                            // Add the label\n                            pdf.setFontSize(8);\n                            pdf.text(\n                                cell.name,\n                                x + cellSize / 2,\n                                y + cellSize - 4,\n                                { align: 'center', baseline: 'middle', maxWidth: cellSize - 4 }\n                            );\n                        } catch (cellErr) {\n                            console.error('Error rendering cell:', cellErr);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    return pdf.output('blob');\n}\n\n/**\n * Trigger download of the generated PDF\n * @param {Blob} pdfBlob - The generated PDF as a Blob\n * @param {string} filename - The filename for the download\n */\nfunction downloadPDFBlob(pdfBlob, filename = 'bingo-cards.pdf') {\n    const url = URL.createObjectURL(pdfBlob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = filename;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n}\n\n// Export functions\nexport {\n    generatePDF,\n    downloadPDFBlob\n}; "],"names":["Storage","_classCallCheck","this","data","icons","settings","language","theme","gridSize","cardsPerSet","gameStates","key","value","_this","Promise","resolve","reject","savedData","localStorage","getItem","_objectSpread","JSON","parse","console","log","error","_this2","dataString","stringify","estimatedSizeMB","length","concat","toFixed","warn","setItem","name","toString","includes","storageError","Error","save","then","id","filter","icon","gameState","push","dataStr","blob","Blob","type","url","URL","createObjectURL","a","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","file","_this3","reader","FileReader","onload","event","target","result","onerror","readAsText","titleInput","gridSizeSelect","setCountInput","setCountInfo","cardCountInput","generateBtn","downloadBtn","cardPreview","identifierElement","iconUploadInput","clearIconsBtn","backupBtn","restoreBtn","restoreInput","pdfCompression","iconCount","languages","en","title","bingoCardTitle","numberOfSets","iconManager","uploadIcons","clearIcons","currentlyUsing","preview","downloadPDF","needIcons","manyUniqueSets","iconsAvailable","backupData","restoreData","backupSuccess","restoreSuccess","restoreError","de","setLanguage","lang","querySelectorAll","forEach","el","getAttribute","textContent","getTranslatedText","_languages$language","replacements","arguments","undefined","text","_i","_Object$entries","Object","entries","_Object$entries$_i","placeholder","replace","initLanguageSelector","onChange","addEventListener","languageSelect","getElementById","selectedLang","convertBlobToBase64Icon","processImage","imageBlob","e","base64data","iconName","Date","now","Math","floor","random","readAsDataURL","size","img","Image","objectUrl","cleanupUrl","canvas","width","height","maxDimension","round","getContext","drawImage","isPNG","toBlob","compressedBlob","src","compressImage","err","createImageFromBase64","base64Data","shuffleArray","array","i","j","_ref","_regeneratorRuntime","r","t","prototype","n","hasOwnProperty","o","Symbol","iterator","asyncIterator","u","toStringTag","c","defineProperty","enumerable","configurable","writable","h","Generator","create","done","method","arg","delegate","d","f","sent","_sent","dispatchException","abrupt","s","Context","call","wrap","GeneratorFunction","GeneratorFunctionPrototype","l","p","getPrototypeOf","y","x","v","g","_invoke","AsyncIterator","_typeof","__await","TypeError","next","w","tryEntries","m","reset","isNaN","displayName","isGeneratorFunction","constructor","mark","setPrototypeOf","__proto__","awrap","async","keys","unshift","pop","values","prev","charAt","slice","stop","rval","complete","finish","delegateYield","asyncGeneratorStep","generatePDF","_x","_generatePDF","apply","_callee","options","cardSets","identifier","_options$compressionL","compressionLevel","jsPDF","pdf","pageWidth","margin","imgQuality","pageCount","set","card","cellSize","gridStartY","row","_loop","col","_context2","window","jspdf","orientation","unit","format","compress","internal","pageSize","getWidth","getHeight","setProperties","subject","author","keywords","creator","t0","setFontSize","setTextColor","align","cards","addPage","grid","cell","imgX","imgY","imgWidth","imgHeight","_context","setDrawColor","rect","isFreeSpace","baseline","aspect","drawWidth","drawHeight","centerX","centerY","addImage","imgErr","maxWidth","cellErr","output","_next","_throw","downloadPDFBlob","pdfBlob","filename","_asyncToGenerator","availableIcons","generatedCards","loadIcons","_loadIcons","_callee2","storage","updateIconCount","saveIconsToStorage","_saveIconsToStorage","_callee3","_context3","saveIcons","alert","_uploadIcons","_callee4","files","newIcons","iconData","_context4","startsWith","updateRequiredIconCount","_clearIcons","_callee5","_context5","confirm","parseInt","setCount","iconsNeededPerSet","infoText","count","disabled","availabilityText","available","needed","generateCards","trim","cellsPerCard","date","dateStr","randomStr","getFullYear","String","getMonth","padStart","getDate","setIndex","selectedIcons","_toConsumableArray","cardIndex","startIdx","shuffledCardIcons","gridRow","index","generateBingoCards","innerHTML","table","className","titleRow","titleCell","colSpan","tr","td","alt","label","displayCardPreview","saveSettings","lastGeneration","timestamp","toISOString","message","_downloadPDF","_callee7","_context7","setTimeout","_callee6","_context6","exportData","_restoreData","_callee8","_context8","importData","location","reload","iconDB","init"],"sourceRoot":""}